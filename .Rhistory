Labels = paste(Label, collapse="\n"))
ggplot(df_top_5_causes_of_death, aes(x = reorder(County, Total), y = Total)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = Labels), hjust = -0.1, vjust = 0.5, size = 3) +
coord_flip() +
labs(title = "Top 3 Causes of Death by County",
x = "County",
y = "Total Deaths") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany", "Cattaraugus", "Chautauqua", "Erie", "Genesee", "Niagara", "Orleans", "Wyoming")
filtered_df <- df %>%
filter(County %in% WNY_counties)
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany", "Cattaraugus", "Chautauqua", "Erie", "Genesee", "Niagara", "Orleans", "Wyoming")
filtered_df <- data %>%
filter(County %in% WNY_counties)
df_top_5_causes_of_death <- filtered_df %>%
group_by(County) %>%
top_n(5, Deaths) %>%
mutate(Rank = row_number(),
Label = paste(Rank, ": ", `Cause of death`, " (", Deaths, ")", sep="")) %>%
summarise(Total = sum(Deaths),
Labels = paste(Label, collapse="\n"))
ggplot(df_top_5_causes_of_death, aes(x = reorder(County, Total), y = Total)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = Labels), hjust = -0.1, vjust = 0.5, size = 3) +
coord_flip() +
labs(title = "Top 3 Causes of Death by County",
x = "County",
y = "Total Deaths") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany County, NY",
"Cattaraugus County, NY",
"Chautauqua County, NY",
"Erie County, NY",
"Genesee County, NY",
"Niagara County, NY",
"Orleans County, NY",
"Wyoming County, NY")
filtered_df <- data %>%
filter(County %in% WNY_counties)
df_top_5_causes_of_death <- filtered_df %>%
group_by(County) %>%
top_n(5, Deaths) %>%
mutate(Rank = row_number(),
Label = paste(Rank, ": ", `Cause of death`, " (", Deaths, ")", sep="")) %>%
summarise(Total = sum(Deaths),
Labels = paste(Label, collapse="\n"))
ggplot(df_top_5_causes_of_death, aes(x = reorder(County, Total), y = Total)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = Labels), hjust = -0.1, vjust = 0.5, size = 3) +
coord_flip() +
labs(title = "Top 5 Causes of Death by County",
x = "County",
y = "Total Deaths") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany County, NY",
"Cattaraugus County, NY",
"Chautauqua County, NY",
"Erie County, NY",
"Genesee County, NY",
"Niagara County, NY",
"Orleans County, NY",
"Wyoming County, NY")
filtered_df <- data %>%
filter(County %in% WNY_counties)
df_top_3_causes_of_death <- filtered_df %>%
group_by(County) %>%
top_n(3, Deaths) %>%
mutate(Rank = row_number(),
Label = paste(Rank, ": ", `Cause of death`, " (", Deaths, ")", sep="")) %>%
summarise(Total = sum(Deaths),
Labels = paste(Label, collapse="\n"))
ggplot(df_top_3_causes_of_death, aes(x = reorder(County, Total), y = Total)) +
geom_col(fill = "steelblue") +
geom_text(aes(label = Labels), hjust = -0.1, vjust = 0.5, size = 3) +
coord_flip() +
labs(title = "Top 3 Causes of Death by County",
x = "County",
y = "Total Deaths") +
theme_minimal() +
theme(axis.text.y = element_text(size = 8))
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany County, NY",
"Cattaraugus County, NY",
"Chautauqua County, NY",
"Erie County, NY",
"Genesee County, NY",
"Niagara County, NY",
"Orleans County, NY",
"Wyoming County, NY")
filtered_df <- data %>%
filter(County %in% WNY_counties)
df_top_3_causes_of_death <- filtered_df %>%
group_by(County) %>%
top_n(3, Deaths) %>%
mutate(Percentage = Deaths / sum(Deaths) * 100)
ggplot(df_top_3_causes_of_death, aes(x = reorder(County, sum(Deaths)), y = Percentage, fill = `Cause of death`)) +
geom_col(position = "stack") +
coord_flip() +
labs(title = "Top 3 Causes of Death by County",
x = "County",
y = "Percentage of Deaths",
fill = "Cause of Death") +
theme_minimal() +
scale_fill_brewer(palette = "Set3")
rlang::last_trace()
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany County, NY",
"Cattaraugus County, NY",
"Chautauqua County, NY",
"Erie County, NY",
"Genesee County, NY",
"Niagara County, NY",
"Orleans County, NY",
"Wyoming County, NY")
filtered_df <- data %>%
filter(County %in% WNY_counties)
top_causes <- filtered_df %>%
group_by(County) %>%
top_n(3, Deaths) %>%
mutate(Percentage = Deaths / sum(Deaths) * 100) %>%
ungroup() %>%
mutate(County = reorder(County, -Percentage, sum))  # Reorder counties by total percentage
ggplot(top_causes, aes(x = County, y = Percentage, fill = `Cause of death`)) +
geom_col(position = "stack") +
coord_flip() +
labs(title = "Top 3 Causes of Death by County",
x = "County",
y = "Percentage of Deaths",
fill = "Cause of Death") +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
geom_text(aes(label = sprintf("%.1f%%", Percentage)),
position = position_stack(vjust = 0.5),
size = 3)
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany County, NY",
"Cattaraugus County, NY",
"Chautauqua County, NY",
"Erie County, NY",
"Genesee County, NY",
"Niagara County, NY",
"Orleans County, NY",
"Wyoming County, NY")
filtered_df <- data %>%
filter(County %in% WNY_counties)
top_causes <- filtered_df %>%
group_by(County) %>%
top_n(3, Deaths) %>%
ungroup() %>%
mutate(County = reorder(County, -Deaths, sum))  # Reorder counties by total deaths
ggplot(top_causes, aes(x = County, y = Deaths, fill = `Cause of death`)) +
geom_col(position = "stack") +
coord_flip() +
labs(title = "Top 3 Causes of Death by County",
x = "County",
y = "Number of Deaths",
fill = "Cause of Death") +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
geom_text(aes(label = Deaths),
position = position_stack(vjust = 0.5),
size = 3)
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany County, NY",
"Cattaraugus County, NY",
"Chautauqua County, NY",
"Genesee County, NY",
"Niagara County, NY",
"Orleans County, NY",
"Wyoming County, NY")
filtered_df <- data %>%
filter(County %in% WNY_counties)
top_causes <- filtered_df %>%
group_by(County) %>%
top_n(3, Deaths) %>%
ungroup() %>%
mutate(County = reorder(County, -Deaths, sum))  # Reorder counties by total deaths
ggplot(top_causes, aes(x = County, y = Deaths, fill = `Cause of death`)) +
geom_col(position = "stack") +
coord_flip() +
labs(title = "Top 3 Causes of Death by County",
x = "County",
y = "Number of Deaths",
fill = "Cause of Death") +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
geom_text(aes(label = Deaths),
position = position_stack(vjust = 0.5),
size = 3)
library(readxl)
library(dplyr)
library(ggplot2)
library(forcats)
data <- read_excel("C:/Users/stevek/Downloads/Causes_of_death_2023.xlsx")
WNY_counties <- c("Allegany County, NY",
"Cattaraugus County, NY",
"Chautauqua County, NY",
"Genesee County, NY",
"Niagara County, NY",
"Orleans County, NY",
"Wyoming County, NY")
filtered_df <- data %>%
filter(County %in% WNY_counties)
top_causes <- filtered_df %>%
group_by(County) %>%
top_n(5, Deaths) %>%
ungroup() %>%
mutate(County = reorder(County, -Deaths, sum))  # Reorder counties by total deaths
ggplot(top_causes, aes(x = County, y = Deaths, fill = `Cause of death`)) +
geom_col(position = "stack") +
coord_flip() +
labs(title = "Top 5 Causes of Death by County",
x = "County",
y = "Number of Deaths",
fill = "Cause of Death") +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
geom_text(aes(label = Deaths),
position = position_stack(vjust = 0.5),
size = 3)
install.packages(“httr”)
install.packages("jsonlite")
install.packages("httr")
library(httr)
library(jsonlite)
# declaring url
url = "https://newsapi.org/v2/top-headlines?country\
=us&category=business&apiKey=<86784197f2e04561818a6f5bd42e5cfb>"
# making http request and storing it in
# news variable
news = GET(https://www.post-journal.com/)
library(httr)
library(jsonlite)
# declaring url
url = "https://newsapi.org/v2/top-headlines?country\
=us&category=business&apiKey=<86784197f2e04561818a6f5bd42e5cfb>"
# making http request and storing it in
# news variable
news = GET(www.post-journal.com/)
library(httr)
library(jsonlite)
# declaring url
url = "https://newsapi.org/v2/top-headlines?country\
=us&category=business&apiKey=<86784197f2e04561818a6f5bd42e5cfb>"
# making http request and storing it in
# news variable
news = GET(www.post-journal.com)
install.packages("rvest")
install.packages("RSelenium")
library(rvest)
library(RSelenium)
url = 'https://www.post-journal.com/'
driver = rsDriver(browser = c("chrome"))
remDr <- driver[["client"]]
remDr$navigate(url)
install.packages("xm12")
install.packages("xml2")
library(tidyRSS)
library(rvest)
library(xml2)
library(tidyRSS)
url <- "https://www.post-journal.com/"  # Replace with your target URL
webpage <- read_html(url)
# Extract titles and links using CSS selectors
titles <- webpage %>% html_nodes("title") %>% html_text()  # Replace with actual CSS class
links <- webpage %>% html_nodes(".three_cat_column a") %>% html_attr("href")
articles <- list()
for (link in links) {
article_page <- read_html(link)
content <- article_page %>% html_nodes("p") %>% html_text()  # Replace "p" with appropriate tag
articles[[link]] <- paste(content, collapse = " ")
Sys.sleep(5)  # Pause between requests to avoid IP blocking
}
print (articles)
?source
?run_analysis
# Set the working directory to where the .qmd file is located
# (Use forward slashes or double backslashes in paths)
setwd("E:/EMS_calls/News_searches/GitHub/CHQ_Report_GitHub_Actions/twentyandchange.github.io/CHQ_Report_W-Tba4YQG")
# Render the Quarto document
# Make sure the 'quarto' R package is installed
tryCatch({
quarto::quarto_render("index.qmd") # Just the filename is needed if setwd() is correct
# Or provide the full path:
# quarto::quarto_render("C:/path/to/your/document.qmd")
print(paste("Successfully rendered document.qmd at", Sys.time()))
}, error = function(e) {
# Optional: Log the error
message <- paste("Error rendering document.qmd at", Sys.time(), ":", e$message)
print(message)
# Consider writing the error to a log file
# writeLines(message, "C:/path/to/your/render_error.log")
stop(e) # Re-throw the error so the task scheduler knows it failed
})
# --- Configuration ---
# Set the full path to the directory containing the .qmd file and Git repo
repo_dir <- "E:/EMS_calls/News_searches/GitHub/CHQ_Report_GitHub_Actions/twentyandchange.github.io/CHQ_Report_W-Tba4YQG"
# Set the name of the Quarto file
qmd_file <- "index.qmd"
# Set the expected name(s) of the output file(s) generated by Quarto
output_files <- paste0(tools::file_path_sans_ext(qmd_file), c("index.html", "search.json"))
# Git configuration
commit_message <- paste("Automated render and update:", Sys.time())
remote_name <- "origin" # Usually "origin"
branch_name <- "main"   # Or "master", or your default branch
# --- Script Logic ---
library(gert) # Load the gert package
# Function for logging messages
log_message <- function(msg) {
timestamp_msg <- paste(Sys.time(), "-", msg)
print(timestamp_msg)
# Optional: Append to a log file
# cat(timestamp_msg, "\n", file = file.path(repo_dir, "automation.log"), append = TRUE)
}
tryCatch({
# 1. Set Working Directory (Important!)
log_message("Setting working directory...")
setwd(repo_dir)
# 2. Render the Quarto Document
log_message(paste("Rendering", qmd_file, "..."))
# Ensure the 'quarto' R package is installed if using this function
quarto::quarto_render(qmd_file)
log_message("Quarto rendering completed.")
# 3. Git Operations using gert
log_message("Starting Git operations...")
# Check status - find which output files actually changed or were created
status <- git_status(repo = repo_dir)
files_to_add <- intersect(output_files, status$file) # Only add expected outputs that appear in status
if (length(files_to_add) > 0) {
log_message(paste("Adding files to Git:", paste(files_to_add, collapse=", ")))
git_add(files = files_to_add, repo = repo_dir)
log_message("Committing changes...")
git_commit(message = commit_message, repo = repo_dir)
log_message("Commit successful.")
log_message(paste("Pushing changes to", remote_name, "/", branch_name, "..."))
# Ensure authentication (SSH keys recommended) is set up!
git_push(remote = remote_name, set_upstream = FALSE, repo = repo_dir, verbose = TRUE)
log_message("Push successful.")
} else {
log_message("No changes detected in output files to commit.")
}
log_message("Script finished successfully.")
}, error = function(e) {
# Log the error
error_message <- paste("Error during script execution:", e$message)
log_message(error_message)
# Consider writing the error to a specific error log file
# cat(error_message, "\n", file = file.path(repo_dir, "automation_error.log"), append = TRUE)
stop(e) # Re-throw the error so Task Scheduler knows it failed
})
# --- Configuration ---
# Set the full path to the directory containing the .qmd file and Git repo
repo_dir <- "E:/EMS_calls/News_searches/GitHub/CHQ_Report_GitHub_Actions/twentyandchange.github.io/CHQ_Report_W-Tba4YQG"
# Set the name of the Quarto file
qmd_file <- "index.qmd"
# Set the expected name(s) of the output file(s) generated by Quarto
output_files <- paste0(tools::file_path_sans_ext(qmd_file), c("index.html", "search.json"))
# Git configuration
commit_message <- paste("Automated render and update:", Sys.time())
remote_name <- "origin" # Usually "origin"
branch_name <- "main"   # Or "master", or your default branch
# --- Script Logic ---
library(gert) # Load the gert package
# Function for logging messages
log_message <- function(msg) {
timestamp_msg <- paste(Sys.time(), "-", msg)
print(timestamp_msg)
# Optional: Append to a log file
# cat(timestamp_msg, "\n", file = file.path(repo_dir, "automation.log"), append = TRUE)
}
tryCatch({
# 1. Set Working Directory (Important!)
log_message("Setting working directory...")
setwd(repo_dir)
# 2. Render the Quarto Document
log_message(paste("Rendering", qmd_file, "..."))
# Ensure the 'quarto' R package is installed if using this function
quarto::quarto_render(qmd_file)
log_message("Quarto rendering completed.")
# 3. Git Operations using gert
log_message("Starting Git operations...")
# Check status - find which output files actually changed or were created
status <- git_status(repo = repo_dir)
files_to_add <- intersect(output_files, status$file) # Only add expected outputs that appear in status
if (length(files_to_add) > 0) {
log_message(paste("Adding files to Git:", paste(files_to_add, collapse=", ")))
git_add(files = files_to_add, repo = repo_dir)
log_message("Committing changes...")
git_commit(message = commit_message, repo = repo_dir)
log_message("Commit successful.")
log_message(paste("Pushing changes to", remote_name, "/", branch_name, "..."))
# Ensure authentication (SSH keys recommended) is set up!
git_push(remote = remote_name, set_upstream = FALSE, repo = repo_dir, verbose = TRUE)
log_message("Push successful.")
} else {
log_message("No changes detected in output files to commit.")
}
log_message("Script finished successfully.")
}, error = function(e) {
# Log the error
error_message <- paste("Error during script execution:", e$message)
log_message(error_message)
# Consider writing the error to a specific error log file
# cat(error_message, "\n", file = file.path(repo_dir, "automation_error.log"), append = TRUE)
stop(e) # Re-throw the error so Task Scheduler knows it failed
})
renv::status()
# --- Configuration ---
# Set the full path to the directory containing the .qmd file and Git repo
repo_dir <- "E:/EMS_calls/News_searches/GitHub/CHQ_Report_GitHub_Actions/twentyandchange.github.io/CHQ_Report_W-Tba4YQG"
# Set the name of the Quarto file
qmd_file <- "index.qmd"
# Set the expected name(s) of the output file(s) generated by Quarto
output_files <- paste0(tools::file_path_sans_ext(qmd_file), c("index.html", "search.json"))
# Git configuration
commit_message <- paste("Automated render and update:", Sys.time())
remote_name <- "origin" # Usually "origin"
branch_name <- "main"   # Or "master", or your default branch
# --- Script Logic ---
library(gert) # Load the gert package
# Function for logging messages
log_message <- function(msg) {
timestamp_msg <- paste(Sys.time(), "-", msg)
print(timestamp_msg)
# Optional: Append to a log file
# cat(timestamp_msg, "\n", file = file.path(repo_dir, "automation.log"), append = TRUE)
}
tryCatch({
# 1. Set Working Directory (Important!)
log_message("Setting working directory...")
setwd(repo_dir)
# 2. Render the Quarto Document
log_message(paste("Rendering", qmd_file, "..."))
# Ensure the 'quarto' R package is installed if using this function
quarto::quarto_render(qmd_file)
log_message("Quarto rendering completed.")
# 3. Git Operations using gert
log_message("Starting Git operations...")
# Check status - find which output files actually changed or were created
status <- git_status(repo = repo_dir)
files_to_add <- intersect(output_files, status$file) # Only add expected outputs that appear in status
if (length(files_to_add) > 0) {
log_message(paste("Adding files to Git:", paste(files_to_add, collapse=", ")))
git_add(files = files_to_add, repo = repo_dir)
log_message("Committing changes...")
git_commit(message = commit_message, repo = repo_dir)
log_message("Commit successful.")
log_message(paste("Pushing changes to", remote_name, "/", branch_name, "..."))
# Ensure authentication (SSH keys recommended) is set up!
git_push(remote = remote_name, set_upstream = FALSE, repo = repo_dir, verbose = TRUE)
log_message("Push successful.")
} else {
log_message("No changes detected in output files to commit.")
}
log_message("Script finished successfully.")
}, error = function(e) {
# Log the error
error_message <- paste("Error during script execution:", e$message)
log_message(error_message)
# Consider writing the error to a specific error log file
# cat(error_message, "\n", file = file.path(repo_dir, "automation_error.log"), append = TRUE)
stop(e) # Re-throw the error so Task Scheduler knows it failed
})
View(auto_commit)
View(auto_commit_gert)
View(auto_commit_gert)
View(auto_commit)
View(auto_commit_gert)
View(auto_commit)
View(auto_commit)
View(auto_commit)
View(auto_commit_gert)
