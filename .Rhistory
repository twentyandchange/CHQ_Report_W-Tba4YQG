stop("Expected output file not found after Quarto execution.")
} else {
# In case of NULL exit status but no evidence of failure, continue with a warning
log_message("WARNING: Couldn't determine Quarto exit status, but no evidence of failure. Continuing.")
}
# --- End of system2 block ---
# 3. Git Operations using gert
log_message("Starting Git operations...")
log_message("Checking Git status...")
status <- git_status(repo = repo_dir)
# Log all changed files
log_message(paste("git_status completed. Found changes:", nrow(status)))
if(nrow(status) > 0) {
log_message("All changed files:")
for(i in 1:nrow(status)) {
log_message(paste("  ", status$file[i], " - ", status$status[i]))
}
} else {
log_message("No changes detected by git_status.")
}
# Collect all non-ignored files
files_to_add <- status$file[status$status != "ignored"]
if (length(files_to_add) > 0) {
log_message(paste("Attempting git_add for:", paste(files_to_add, collapse=", ")))
git_add(files = files_to_add, repo = repo_dir)
log_message("git_add completed.")
log_message("Attempting git_commit...")
git_commit(message = commit_message, repo = repo_dir)
log_message("git_commit completed.")
log_message(paste("Attempting git_push to", remote_name, "/", branch_name, "..."))
git_push(remote = remote_name, set_upstream = FALSE, repo = repo_dir, verbose = TRUE)
log_message("git_push call completed.")
} else {
log_message("No changes detected in repository to commit.")
}
log_message("--- R SCRIPT FINISHED SUCCESSFULLY ---")
}, error = function(e) {
# Log the specific error message
error_message <- paste("!!! SCRIPT FAILED:", e$message)
log_message(error_message)
stop(e) # Re-throw the error so Task Scheduler might see it as failed
})
# --- Configuration ---
# Set the full path to the directory containing the .qmd file and Git repo
# This should also be the Quarto output-dir parent specified in your YAML
repo_dir <- "E:/EMS_calls/News_searches/GitHub/CHQ_Report_GitHub_Actions/twentyandchange.github.io/CHQ_Report_W-Tba4YQG"
# Set the name of the Quarto file (relative to repo_dir)
qmd_file <- "index.qmd"
# Set the expected name(s) of the output file(s) generated by Quarto
# IMPORTANT: Adjusted to reflect output inside _site directory
output_files <- "_site/index.html"
# Git configuration (adjust as needed)
commit_message <- paste("Automated render and update via Task Scheduler:", Sys.time()) # Example commit message
remote_name <- "origin"
branch_name <- "main"   # Or "master", or your default branch
# --- Logging Setup ---
# Use a full path in a location you are SURE the task user can write to.
log_file_path <- file.path(repo_dir, "r_task_debug.log") # Log inside the repo dir now, or change path if needed
log_message <- function(msg) {
timestamp_msg <- paste(Sys.time(), "-", msg)
print(timestamp_msg) # Keep for manual runs
try(cat(timestamp_msg, "\n", file = log_file_path, append = TRUE), silent = TRUE) # Write to log file
}
# --- Quarto Path Setup ---
# Manually specify the directory containing quarto.exe
# Using the path that seemed to work in the previous successful detection logs
quarto_bin_dir <- "C:/Program Files/RStudio/resources/app/bin/quarto/bin/" # Verify this path exists!
if (dir.exists(quarto_bin_dir)) {
log_message(paste("Quarto directory found at:", quarto_bin_dir))
# Set the QUARTO_PATH environment variable (used by the quarto R package)
Sys.setenv(QUARTO_PATH = quarto_bin_dir)
log_message(paste("Set QUARTO_PATH environment variable to:", Sys.getenv("QUARTO_PATH")))
# Add Quarto bin directory to PATH
current_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(quarto_bin_dir, current_path, sep = ";"))
log_message(paste("Added Quarto directory to PATH environment variable"))
} else {
log_message(paste("!!! Manually specified Quarto directory not found:", quarto_bin_dir))
# Stop if Quarto path is essential and known path is wrong
stop("Configured Quarto directory not found.")
}
# --- R SCRIPT STARTED ---
log_message("--- R SCRIPT STARTED ---")
log_message(paste("Running as user:", Sys.info()[["user"]]))
log_message(paste("Initial working directory:", getwd()))
log_message(paste(".libPaths():", paste(.libPaths(), collapse="; ")))
log_message(paste("Repository directory configured:", repo_dir))
log_message(paste("Quarto file configured:", qmd_file))
log_message(paste("Expected output file(s):", paste(shQuote(output_files), collapse=", ")))
# --- Script Logic ---
log_message("Loading gert package...")
library(gert)
log_message("gert package loaded.")
tryCatch({
# 1. Set Working Directory
log_message(paste("Attempting to setwd to:", repo_dir))
setwd(repo_dir)
log_message(paste("Working directory AFTER setwd:", getwd())) # Verify!
# Check write permissions in target dir
test_write_path <- file.path(repo_dir, "permission_test_delete_me.txt")
log_message(paste("Attempting test write to:", test_write_path))
try(writeLines("test", test_write_path), silent=TRUE)
if(file.exists(test_write_path)) {
log_message("Test write SUCCESSFUL.")
try(file.remove(test_write_path), silent=TRUE)
} else {
log_message("!!! TEST WRITE FAILED !!! Check directory permissions.")
}
# Install missing packages using renv
log_message("Checking renv status...")
if (!requireNamespace("renv", quietly = TRUE)) {
log_message("Installing renv package...")
install.packages("renv")
}
log_message("Attempting to restore packages from renv lockfile...")
renv::restore()
log_message("Package restoration completed.")
# 2. Render the Quarto Document using system2 (to capture output/errors)
# --- Start of system2 block ---
# Directly build the full path to quarto.exe
quarto_exe_full_path <- file.path(quarto_bin_dir, "quarto.exe")
# Check if the file actually exists
if (!file.exists(quarto_exe_full_path)) {
log_message(paste("!!! ERROR: Quarto executable not found at:", quarto_exe_full_path))
stop("Quarto executable not found at the specified path.")
}
log_message(paste("Using Quarto executable at:", quarto_exe_full_path))
log_message(paste("Attempting Quarto render via system2 using:", quarto_exe_full_path))
render_args <- c("render", qmd_file)
# Execute and capture output/error streams
quarto_result <- system2(
command = quarto_exe_full_path,
args = render_args,
stdout = TRUE,  # Capture standard output
stderr = TRUE   # Capture standard error
)
# Check the exit status attribute
exit_status <- attr(quarto_result, "status")
# Log exit status regardless of value for debugging
log_message(paste("Quarto CLI exit status:", ifelse(is.null(exit_status), "NULL (execution may still have succeeded)", exit_status)))
# Log captured stdout/stderr
if(length(quarto_result) > 0 && any(nzchar(quarto_result))) {
log_message("Quarto CLI stdout/stderr:")
# The output is a character vector, print each line
for(line in quarto_result) { log_message(paste("  [Output]", line)) }
} else {
log_message("Quarto CLI stdout/stderr: (empty)")
}
# Check if output file was created regardless of exit status
output_exists <- file.exists(output_files)
log_message(paste("Checking if expected output exists at", shQuote(output_files), ":", output_exists))
# Look for success message in the output
success_indicator <- any(grepl("Output created:", quarto_result, fixed = TRUE))
log_message(paste("Found 'Output created:' message in Quarto output:", success_indicator))
# Determine success based on both output file existence and success message
if(output_exists && success_indicator) {
log_message("Quarto render succeeded based on output file existence and success message.")
} else if(!is.null(exit_status) && exit_status != 0) {
# Only fail on explicit non-zero exit status
stop(paste("Quarto CLI failed with exit status:", exit_status, "- see stdout/stderr logs above."))
} else if(!output_exists) {
# Fail if output doesn't exist
stop("Expected output file not found after Quarto execution.")
} else {
# In case of NULL exit status but no evidence of failure, continue with a warning
log_message("WARNING: Couldn't determine Quarto exit status, but no evidence of failure. Continuing.")
}
# --- End of system2 block ---
# 3. Git Operations using gert
log_message("Starting Git operations...")
log_message("Checking Git status...")
status <- git_status(repo = repo_dir)
# Log all changed files
log_message(paste("git_status completed. Found changes:", nrow(status)))
if(nrow(status) > 0) {
log_message("All changed files:")
for(i in 1:nrow(status)) {
log_message(paste("  ", status$file[i], " - ", status$status[i]))
}
} else {
log_message("No changes detected by git_status.")
}
# Collect all non-ignored files
files_to_add <- status$file[status$status != "ignored"]
if (length(files_to_add) > 0) {
log_message(paste("Attempting git_add for:", paste(files_to_add, collapse=", ")))
git_add(files = files_to_add, repo = repo_dir)
log_message("git_add completed.")
log_message("Attempting git_commit...")
git_commit(message = commit_message, repo = repo_dir)
log_message("git_commit completed.")
log_message(paste("Attempting git_push to", remote_name, "/", branch_name, "..."))
git_push(remote = remote_name, set_upstream = FALSE, repo = repo_dir, verbose = TRUE)
log_message("git_push call completed.")
} else {
log_message("No changes detected in repository to commit.")
}
log_message("--- R SCRIPT FINISHED SUCCESSFULLY ---")
}, error = function(e) {
# Log the specific error message
error_message <- paste("!!! SCRIPT FAILED:", e$message)
log_message(error_message)
stop(e) # Re-throw the error so Task Scheduler might see it as failed
})
# --- Configuration ---
# Set the full path to the directory containing the .qmd file and Git repo
# This should also be the Quarto output-dir parent specified in your YAML
repo_dir <- "E:/EMS_calls/News_searches/GitHub/CHQ_Report_GitHub_Actions/twentyandchange.github.io/CHQ_Report_W-Tba4YQG"
# Set the name of the Quarto file (relative to repo_dir)
qmd_file <- "index.qmd"
# Set the expected name(s) of the output file(s) generated by Quarto
# IMPORTANT: Adjusted to reflect output inside _site directory
output_files <- "_site/index.html"
# Git configuration (adjust as needed)
commit_message <- paste("Automated render and update via Task Scheduler:", Sys.time()) # Example commit message
remote_name <- "origin"
branch_name <- "main"   # Or "master", or your default branch
# --- Logging Setup ---
# Use a full path in a location you are SURE the task user can write to.
log_file_path <- file.path(repo_dir, "r_task_debug.log") # Log inside the repo dir now, or change path if needed
log_message <- function(msg) {
timestamp_msg <- paste(Sys.time(), "-", msg)
print(timestamp_msg) # Keep for manual runs
try(cat(timestamp_msg, "\n", file = log_file_path, append = TRUE), silent = TRUE) # Write to log file
}
# --- Quarto Path Setup ---
# Manually specify the directory containing quarto.exe
# Using the path that seemed to work in the previous successful detection logs
quarto_bin_dir <- "C:/Program Files/RStudio/resources/app/bin/quarto/bin/" # Verify this path exists!
if (dir.exists(quarto_bin_dir)) {
log_message(paste("Quarto directory found at:", quarto_bin_dir))
# Set the QUARTO_PATH environment variable (used by the quarto R package)
Sys.setenv(QUARTO_PATH = quarto_bin_dir)
log_message(paste("Set QUARTO_PATH environment variable to:", Sys.getenv("QUARTO_PATH")))
# Add Quarto bin directory to PATH
current_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(quarto_bin_dir, current_path, sep = ";"))
log_message(paste("Added Quarto directory to PATH environment variable"))
} else {
log_message(paste("!!! Manually specified Quarto directory not found:", quarto_bin_dir))
# Stop if Quarto path is essential and known path is wrong
stop("Configured Quarto directory not found.")
}
# --- R SCRIPT STARTED ---
log_message("--- R SCRIPT STARTED ---")
log_message(paste("Running as user:", Sys.info()[["user"]]))
log_message(paste("Initial working directory:", getwd()))
log_message(paste(".libPaths():", paste(.libPaths(), collapse="; ")))
log_message(paste("Repository directory configured:", repo_dir))
log_message(paste("Quarto file configured:", qmd_file))
log_message(paste("Expected output file(s):", paste(shQuote(output_files), collapse=", ")))
# --- Script Logic ---
log_message("Loading gert package...")
library(gert)
log_message("gert package loaded.")
tryCatch({
# 1. Set Working Directory
log_message(paste("Attempting to setwd to:", repo_dir))
setwd(repo_dir)
log_message(paste("Working directory AFTER setwd:", getwd())) # Verify!
# Check write permissions in target dir
test_write_path <- file.path(repo_dir, "permission_test_delete_me.txt")
log_message(paste("Attempting test write to:", test_write_path))
try(writeLines("test", test_write_path), silent=TRUE)
if(file.exists(test_write_path)) {
log_message("Test write SUCCESSFUL.")
try(file.remove(test_write_path), silent=TRUE)
} else {
log_message("!!! TEST WRITE FAILED !!! Check directory permissions.")
}
# 2. Render the Quarto Document using system2 (to capture output/errors)
# --- Start of system2 block ---
# Directly build the full path to quarto.exe
quarto_exe_full_path <- file.path(quarto_bin_dir, "quarto.exe")
# Check if the file actually exists
if (!file.exists(quarto_exe_full_path)) {
log_message(paste("!!! ERROR: Quarto executable not found at:", quarto_exe_full_path))
stop("Quarto executable not found at the specified path.")
}
log_message(paste("Using Quarto executable at:", quarto_exe_full_path))
log_message(paste("Attempting Quarto render via system2 using:", quarto_exe_full_path))
render_args <- c("render", qmd_file)
# Execute and capture output/error streams
quarto_result <- system2(
command = quarto_exe_full_path,
args = render_args,
stdout = TRUE,  # Capture standard output
stderr = TRUE   # Capture standard error
)
# Check the exit status attribute
exit_status <- attr(quarto_result, "status")
# Log exit status regardless of value for debugging
log_message(paste("Quarto CLI exit status:", ifelse(is.null(exit_status), "NULL (execution may still have succeeded)", exit_status)))
# Log captured stdout/stderr
if(length(quarto_result) > 0 && any(nzchar(quarto_result))) {
log_message("Quarto CLI stdout/stderr:")
# The output is a character vector, print each line
for(line in quarto_result) { log_message(paste("  [Output]", line)) }
} else {
log_message("Quarto CLI stdout/stderr: (empty)")
}
# Check if output file was created regardless of exit status
output_exists <- file.exists(output_files)
log_message(paste("Checking if expected output exists at", shQuote(output_files), ":", output_exists))
# Look for success message in the output
success_indicator <- any(grepl("Output created:", quarto_result, fixed = TRUE))
log_message(paste("Found 'Output created:' message in Quarto output:", success_indicator))
# Determine success based on both output file existence and success message
if(output_exists && success_indicator) {
log_message("Quarto render succeeded based on output file existence and success message.")
} else if(!is.null(exit_status) && exit_status != 0) {
# Only fail on explicit non-zero exit status
stop(paste("Quarto CLI failed with exit status:", exit_status, "- see stdout/stderr logs above."))
} else if(!output_exists) {
# Fail if output doesn't exist
stop("Expected output file not found after Quarto execution.")
} else {
# In case of NULL exit status but no evidence of failure, continue with a warning
log_message("WARNING: Couldn't determine Quarto exit status, but no evidence of failure. Continuing.")
}
# --- End of system2 block ---
# 3. Git Operations using gert
log_message("Starting Git operations...")
log_message("Checking Git status...")
status <- git_status(repo = repo_dir)
# Log all changed files
log_message(paste("git_status completed. Found changes:", nrow(status)))
if(nrow(status) > 0) {
log_message("All changed files:")
for(i in 1:nrow(status)) {
log_message(paste("  ", status$file[i], " - ", status$status[i]))
}
} else {
log_message("No changes detected by git_status.")
}
# Collect all non-ignored files
files_to_add <- status$file[status$status != "ignored"]
if (length(files_to_add) > 0) {
log_message(paste("Attempting git_add for:", paste(files_to_add, collapse=", ")))
git_add(files = files_to_add, repo = repo_dir)
log_message("git_add completed.")
log_message("Attempting git_commit...")
git_commit(message = commit_message, repo = repo_dir)
log_message("git_commit completed.")
log_message(paste("Attempting git_push to", remote_name, "/", branch_name, "..."))
git_push(remote = remote_name, set_upstream = FALSE, repo = repo_dir, verbose = TRUE)
log_message("git_push call completed.")
} else {
log_message("No changes detected in repository to commit.")
}
log_message("--- R SCRIPT FINISHED SUCCESSFULLY ---")
}, error = function(e) {
# Log the specific error message
error_message <- paste("!!! SCRIPT FAILED:", e$message)
log_message(error_message)
stop(e) # Re-throw the error so Task Scheduler might see it as failed
})
# --- Configuration ---
# Set the full path to the directory containing the .qmd file and Git repo
# This should also be the Quarto output-dir parent specified in your YAML
repo_dir <- "E:/EMS_calls/News_searches/GitHub/CHQ_Report_GitHub_Actions/twentyandchange.github.io/CHQ_Report_W-Tba4YQG"
# Set the name of the Quarto file (relative to repo_dir)
qmd_file <- "index.qmd"
# Set the expected name(s) of the output file(s) generated by Quarto
# IMPORTANT: Adjusted to reflect output inside _site directory
output_files <- "_site/index.html"
# Git configuration (adjust as needed)
commit_message <- paste("Automated render and update via Task Scheduler:", Sys.time()) # Example commit message
remote_name <- "origin"
branch_name <- "main"   # Or "master", or your default branch
# --- Logging Setup ---
# Use a full path in a location you are SURE the task user can write to.
log_file_path <- file.path(repo_dir, "r_task_debug.log") # Log inside the repo dir now, or change path if needed
log_message <- function(msg) {
timestamp_msg <- paste(Sys.time(), "-", msg)
print(timestamp_msg) # Keep for manual runs
try(cat(timestamp_msg, "\n", file = log_file_path, append = TRUE), silent = TRUE) # Write to log file
}
# --- Quarto Path Setup ---
# Manually specify the directory containing quarto.exe
# Using the path that seemed to work in the previous successful detection logs
quarto_bin_dir <- "C:/Program Files/RStudio/resources/app/bin/quarto/bin/" # Verify this path exists!
if (dir.exists(quarto_bin_dir)) {
log_message(paste("Quarto directory found at:", quarto_bin_dir))
# Set the QUARTO_PATH environment variable (used by the quarto R package)
Sys.setenv(QUARTO_PATH = quarto_bin_dir)
log_message(paste("Set QUARTO_PATH environment variable to:", Sys.getenv("QUARTO_PATH")))
# Add Quarto bin directory to PATH
current_path <- Sys.getenv("PATH")
Sys.setenv(PATH = paste(quarto_bin_dir, current_path, sep = ";"))
log_message(paste("Added Quarto directory to PATH environment variable"))
} else {
log_message(paste("!!! Manually specified Quarto directory not found:", quarto_bin_dir))
# Stop if Quarto path is essential and known path is wrong
stop("Configured Quarto directory not found.")
}
# --- R SCRIPT STARTED ---
log_message("--- R SCRIPT STARTED ---")
log_message(paste("Running as user:", Sys.info()[["user"]]))
log_message(paste("Initial working directory:", getwd()))
log_message(paste(".libPaths():", paste(.libPaths(), collapse="; ")))
log_message(paste("Repository directory configured:", repo_dir))
log_message(paste("Quarto file configured:", qmd_file))
log_message(paste("Expected output file(s):", paste(shQuote(output_files), collapse=", ")))
# --- Script Logic ---
log_message("Loading gert package...")
library(gert)
log_message("gert package loaded.")
tryCatch({
# 1. Set Working Directory
log_message(paste("Attempting to setwd to:", repo_dir))
setwd(repo_dir)
log_message(paste("Working directory AFTER setwd:", getwd())) # Verify!
# Check write permissions in target dir
test_write_path <- file.path(repo_dir, "permission_test_delete_me.txt")
log_message(paste("Attempting test write to:", test_write_path))
try(writeLines("test", test_write_path), silent=TRUE)
if(file.exists(test_write_path)) {
log_message("Test write SUCCESSFUL.")
try(file.remove(test_write_path), silent=TRUE)
} else {
log_message("!!! TEST WRITE FAILED !!! Check directory permissions.")
}
# 2. Render the Quarto Document using system2 (to capture output/errors)
# --- Start of system2 block ---
# Directly build the full path to quarto.exe
quarto_exe_full_path <- file.path(quarto_bin_dir, "quarto.exe")
# Check if the file actually exists
if (!file.exists(quarto_exe_full_path)) {
log_message(paste("!!! ERROR: Quarto executable not found at:", quarto_exe_full_path))
stop("Quarto executable not found at the specified path.")
}
log_message(paste("Using Quarto executable at:", quarto_exe_full_path))
log_message(paste("Attempting Quarto render via system2 using:", quarto_exe_full_path))
render_args <- c("render", qmd_file)
# Execute and capture output/error streams
quarto_result <- system2(
command = quarto_exe_full_path,
args = render_args,
stdout = TRUE,  # Capture standard output
stderr = TRUE   # Capture standard error
)
# Check the exit status attribute
exit_status <- attr(quarto_result, "status")
# Log exit status regardless of value for debugging
log_message(paste("Quarto CLI exit status:", ifelse(is.null(exit_status), "NULL (execution may still have succeeded)", exit_status)))
# Log captured stdout/stderr
if(length(quarto_result) > 0 && any(nzchar(quarto_result))) {
log_message("Quarto CLI stdout/stderr:")
# The output is a character vector, print each line
for(line in quarto_result) { log_message(paste("  [Output]", line)) }
} else {
log_message("Quarto CLI stdout/stderr: (empty)")
}
# Check if output file was created regardless of exit status
output_exists <- file.exists(output_files)
log_message(paste("Checking if expected output exists at", shQuote(output_files), ":", output_exists))
# Look for success message in the output
success_indicator <- any(grepl("Output created:", quarto_result, fixed = TRUE))
log_message(paste("Found 'Output created:' message in Quarto output:", success_indicator))
# Determine success based on both output file existence and success message
if(output_exists && success_indicator) {
log_message("Quarto render succeeded based on output file existence and success message.")
} else if(!is.null(exit_status) && exit_status != 0) {
# Only fail on explicit non-zero exit status
stop(paste("Quarto CLI failed with exit status:", exit_status, "- see stdout/stderr logs above."))
} else if(!output_exists) {
# Fail if output doesn't exist
stop("Expected output file not found after Quarto execution.")
} else {
# In case of NULL exit status but no evidence of failure, continue with a warning
log_message("WARNING: Couldn't determine Quarto exit status, but no evidence of failure. Continuing.")
}
# --- End of system2 block ---
# 3. Git Operations using gert
log_message("Starting Git operations...")
log_message("Checking Git status...")
status <- git_status(repo = repo_dir)
# Log all changed files
log_message(paste("git_status completed. Found changes:", nrow(status)))
if(nrow(status) > 0) {
log_message("All changed files:")
for(i in 1:nrow(status)) {
log_message(paste("  ", status$file[i], " - ", status$status[i]))
}
} else {
log_message("No changes detected by git_status.")
}
# Collect all non-ignored files
files_to_add <- status$file[status$status != "ignored"]
if (length(files_to_add) > 0) {
log_message(paste("Attempting git_add for:", paste(files_to_add, collapse=", ")))
git_add(files = files_to_add, repo = repo_dir)
log_message("git_add completed.")
log_message("Attempting git_commit...")
git_commit(message = commit_message, repo = repo_dir)
log_message("git_commit completed.")
log_message(paste("Attempting git_push to", remote_name, "/", branch_name, "..."))
git_push(remote = remote_name, set_upstream = FALSE, repo = repo_dir, verbose = TRUE)
log_message("git_push call completed.")
} else {
log_message("No changes detected in repository to commit.")
}
log_message("--- R SCRIPT FINISHED SUCCESSFULLY ---")
}, error = function(e) {
# Log the specific error message
error_message <- paste("!!! SCRIPT FAILED:", e$message)
log_message(error_message)
stop(e) # Re-throw the error so Task Scheduler might see it as failed
})
renv::status()
renv::snapshot()
